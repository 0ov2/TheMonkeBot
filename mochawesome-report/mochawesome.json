{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2022-04-23T18:20:41.378Z",
    "end": "2022-04-23T18:20:41.431Z",
    "duration": 53,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ed47c015-f920-4668-9436-05f7295a2e6f",
      "title": "",
      "fullFile": "C:\\Users\\0.o\\Desktop\\TheMonkeBot\\test\\commands.test.js",
      "file": "\\test\\commands.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f1d05fdb-e8d7-4435-855d-febb2629f29f",
          "title": "Test different commands",
          "fullFile": "C:\\Users\\0.o\\Desktop\\TheMonkeBot\\test\\commands.test.js",
          "file": "\\test\\commands.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test DB connections",
              "fullTitle": "Test different commands Test DB connections",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const connection1 = await client.command.get('dbconnection').execute(\"true\");\nconst connection2 = await client.command.get('dbconnection').execute(\"false\");\n\nexpect(connection1).to.be.a('Object')\nexpect(connection2).to.be.a('Object')\n\nconnection1.end();\nconnection2.end();",
              "err": {},
              "uuid": "72de8d87-316f-4da5-b80c-5e1f6b7ad360",
              "parentUUID": "f1d05fdb-e8d7-4435-855d-febb2629f29f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test that channels are returned properly",
              "fullTitle": "Test different commands Test that channels are returned properly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getChannel = require(\"../commands/getChannelId\");\nexpect(getChannel(client, 'op-match-announcement')).to.be.a('string').that.equals(\"Channel doesn't exist\");",
              "err": {},
              "uuid": "a351be87-3174-4e74-a575-ba7f38942201",
              "parentUUID": "f1d05fdb-e8d7-4435-855d-febb2629f29f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "72de8d87-316f-4da5-b80c-5e1f6b7ad360",
            "a351be87-3174-4e74-a575-ba7f38942201"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}